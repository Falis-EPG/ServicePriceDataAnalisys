# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CURXzYTitwj6itqIVYgiO-rlJ46Xj21F
"""

!pip install seaborn
!pip update seaborn

import pandas as pd
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

uri = 'projects.csv'
dados = pd.read_csv(uri)
dados.head()

a_renomear = {
    'expected_hours' : 'horas_esperadas',
    'price' : 'preco',
    'unfinished' : 'nao_finalizado'
}
dados = dados.rename(columns = a_renomear)
dados.head()

trocar = {
    0 : 1,
    1: 0
}
dados['finalizado'] = dados.nao_finalizado.map(trocar)
dados.head()

sns.scatterplot(x="horas_esperadas", y='preco', data=dados)

sns.scatterplot(x="horas_esperadas", y="preco", hue="finalizado", data=dados, )

x = dados[['horas_esperadas', 'preco']]
y = dados['finalizado']

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25, random_state=5, stratify=y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = LinearSVC(random_state=5)
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

accurracy = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % accurracy)

previsoes_teste = np.ones(540)
accurracy = accuracy_score(teste_y, previsoes_teste) * 100
print("A acurácia foi %.2f%%" % accurracy)

sns.scatterplot(x="horas_esperadas", y="preco", hue=teste_y, data=teste_x)

xmin = teste_x.horas_esperadas.min()
xmax = teste_x.horas_esperadas.max()
ymin = teste_x.preco.min()
ymax = teste_x.preco.max()
print(xmin, xmax, ymin, ymax)

pixel = 1000
eixo_x = np.arange(xmin, xmax, (xmax - xmin)/pixel)
eixo_y = np.arange(ymin, ymax, (ymax - ymin)/pixel)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
pontos

z = modelo.predict(pontos)
z = z.reshape(xx.shape)
z.shape

plt.contourf(xx, yy, z, alpha=0.3)
plt.scatter(teste_x.horas_esperadas, teste_x.preco, c="purple", s=1)

x = dados[['horas_esperadas', 'preco']]
y = dados['finalizado']

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25, random_state=5, stratify=y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = SVC(random_state=5)
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

accurracy = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % accurracy)

previsoes_teste = np.ones(540)
accurracy = accuracy_score(teste_y, previsoes_teste) * 100
print("A acurácia foi %.2f%%" % accurracy)

sns.scatterplot(x="horas_esperadas", y="preco", hue=teste_y, data=teste_x)

xmin = teste_x.horas_esperadas.min()
xmax = teste_x.horas_esperadas.max()
ymin = teste_x.preco.min()
ymax = teste_x.preco.max()
print(xmin, xmax, ymin, ymax)

pixel = 1000
eixo_x = np.arange(xmin, xmax, (xmax - xmin)/pixel)
eixo_y = np.arange(ymin, ymax, (ymax - ymin)/pixel)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
pontos

z = modelo.predict(pontos)
z = z.reshape(xx.shape)
z.shape

plt.contourf(xx, yy, z, alpha=0.3)
plt.scatter(teste_x.horas_esperadas, teste_x.preco, c="purple", s=1)

x = dados[['horas_esperadas', 'preco']]
y = dados['finalizado']

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25, random_state=5, stratify=y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))


scaler = StandardScaler()
scaler.fit(treino_x)
treino_x = scaler.transform(treino_x)
teste_x = scaler.transform(teste_x)

modelo = SVC(random_state=5)
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

accurracy = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % accurracy)

previsoes_teste = np.ones(540)
accurracy = accuracy_score(teste_y, previsoes_teste) * 100
print("A acurácia foi %.2f%%" % accurracy)

data_x = teste_x[:,0]
data_y = teste_x[:,1]

xmin = data_x.min()
xmax = data_x.max()
ymin = data_y.min()
ymax = data_y.max()
print(xmin, xmax, ymin, ymax)

pixel = 1000
eixo_x = np.arange(xmin, xmax, (xmax - xmin)/pixel)
eixo_y = np.arange(ymin, ymax, (ymax - ymin)/pixel)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
pontos

z = modelo.predict(pontos)
z = z.reshape(xx.shape)
z.shape

plt.contourf(xx, yy, z, alpha=0.3)
plt.scatter(data_x, data_y, c="purple", s=1)

